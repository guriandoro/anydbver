- name: Install cert manager
  when: cert_manager != ""
  shell:
    cmd: kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.3.1/cert-manager.yaml

- name: Install operator
  when: percona_k8s_op_pxc_version != "" or percona_k8s_op_ps_version != "" or percona_k8s_op_psmdb_version != ""
  shell:
    cmd: >-
      cd /root;
      git clone -b {{'v' if percona_k8s_op_version | regex_search('^[0-9]+') else ''}}{{ percona_k8s_op_version }} https://github.com/percona/{{ percona_k8s_op_name }}.git;
      cd {{ percona_k8s_op_name }};
      until kubectl wait --for=condition=ready -n kube-system pod -l k8s-app=kube-dns &>/dev/null;do sleep 2;done;
      kubectl apply -f deploy/bundle.yaml;
      kubectl apply -f deploy/secrets.yaml;
      kubectl apply -f deploy/backup-s3.yaml;
      until
       kubectl wait --for=condition=ready pod -l name={{ percona_k8s_op_name }} &>/dev/null ||
       kubectl wait --for=condition=ready pod -l control-plane={{ percona_k8s_op_name if percona_k8s_op_name != 'percona-server-mysql-operator' else 'percona-server-for-mysql-operator' }} &>/dev/null ||
       kubectl wait --for=condition=ready pod -l app.kubernetes.io/name={{ percona_k8s_op_name }} &>/dev/null ;
      do sleep 2;done;
      touch /root/{{ percona_k8s_op_name }}-k8s.multi.applied
    creates: /root/{{ percona_k8s_op_name }}-k8s.multi.applied
- name: Prepare cr.yaml file for Percona K8S operators (single/multi node)
  when: percona_k8s_op_pxc_version != '' or percona_k8s_op_psmdb_version != ''
  shell:
    warn: false
    cmd: >-
      if [[ $(cat /proc/meminfo |head -n 1|awk '{print $2}') -lt 4000000 ]] ;
        then sed -i -e 's/\<1G\>/300M/g' -e 's/\<600m\>/60m/g' /root/{{ percona_k8s_op_name }}/deploy/cr.yaml ;
      fi;
      mv /root/{{ percona_k8s_op_name }}/deploy/cr-min.yaml /root/{{ percona_k8s_op_name }}/deploy/cr.yaml;
      if test $( kubectl get nodes 2>/dev/null|wc -l ) -lt 3 ;
      then
      sed
      -e 's/antiAffinityTopologyKey: .*$/antiAffinityTopologyKey: \"none\"/g'
      -e 's/allowUnsafeConfigurations: false/allowUnsafeConfigurations: true/'
      /root/{{ percona_k8s_op_name }}/deploy/cr.yaml > /root/{{ percona_k8s_op_name }}/deploy/cr-single.yaml;
      mv /root/{{ percona_k8s_op_name }}/deploy/cr-single.yaml /root/{{ percona_k8s_op_name }}/deploy/cr.yaml;
      fi;
      touch /root/{{ percona_k8s_op_name }}-k8s.single-multi.applied
    creates: /root/{{ percona_k8s_op_name }}-k8s.single-multi.applied
- name: Prepare cr.yaml file for Percona K8S operators (pmm)
  when: (percona_k8s_op_pxc_version != '' or percona_k8s_op_ps_version != '' or percona_k8s_op_psmdb_version != '') and k8s_pmm != ''
  shell:
    warn: false
    cmd: >-
      sed -e 's/c3VwYXxefHBheno=/YWRtaW4=/' -e 's/supa|^|pazz/admin/' /root/{{ percona_k8s_op_name }}/deploy/secrets.yaml  | kubectl apply -f - ;
      /usr/local/bin/yq merge -x /root/{{ percona_k8s_op_name }}/deploy/cr.yaml /vagrant/configs/k8s/cr-pmm.yaml
      > /root/{{ percona_k8s_op_name }}/deploy/cr-pmm.yaml;
      mv /root/{{ percona_k8s_op_name }}/deploy/cr-pmm.yaml /root/{{ percona_k8s_op_name }}/deploy/cr.yaml;
      touch /root/{{ percona_k8s_op_name }}-k8s.pmm.applied
    creates: /root/{{ percona_k8s_op_name }}-k8s.pmm.applied
- name: Prepare cr.yaml file for Percona K8S operators (gtid)
  when: (percona_k8s_op_pxc_version != '' or percona_k8s_op_psmdb_version != '') and ('gtid' in db_features.split(',') )
  shell:
    warn: false
    cmd: >-
      /usr/local/bin/yq merge -x /root/{{ percona_k8s_op_name }}/deploy/cr.yaml /vagrant/configs/k8s/cr-mysql-gtid.yaml
      > /root/{{ percona_k8s_op_name }}/deploy/cr-gtid.yaml;
      mv /root/{{ percona_k8s_op_name }}/deploy/cr-gtid.yaml /root/{{ percona_k8s_op_name }}/deploy/cr.yaml;
      touch /root/{{ percona_k8s_op_name }}-k8s.gtid.applied
    creates: /root/{{ percona_k8s_op_name }}-k8s.gtid.applied
- name: Prepare cr.yaml file for Percona K8S operators (pxc57)
  when: (percona_k8s_op_pxc_version != '' or percona_k8s_op_psmdb_version != '') and ('pxc57' in db_features.split(',') )
  shell:
    warn: false
    cmd: >-
      /usr/local/bin/yq merge -x /root/{{ percona_k8s_op_name }}/deploy/cr.yaml /vagrant/configs/k8s/cr-mysql-pxc57.yaml
      > /root/{{ percona_k8s_op_name }}/deploy/cr-pxc57.yaml;
      mv /root/{{ percona_k8s_op_name }}/deploy/cr-pxc57.yaml /root/{{ percona_k8s_op_name }}/deploy/cr.yaml;
      sed -i -e 's,percona-xtradb-cluster-operator:1.4.0-pxc5.7,percona-xtradb-cluster:5.7.33-31.49,' -e 's/1\.4\.0/{{percona_k8s_op_pxc_version}}/g' -e 's/SmartUpdate/RollingUpdate/' /root/{{ percona_k8s_op_name }}/deploy/cr.yaml;
      touch /root/{{ percona_k8s_op_name }}-k8s.pxc57.applied
    creates: /root/{{ percona_k8s_op_name }}-k8s.pxc57.applied
- name: Prepare cr.yaml file for Percona K8S operators (backup)
  when: (percona_k8s_op_pxc_version != '' or percona_k8s_op_psmdb_version != '') and ('backup' in db_features.split(',') )
  shell:
    warn: false
    cmd: >-
      /usr/local/bin/yq merge -x /root/{{ percona_k8s_op_name }}/deploy/cr.yaml /vagrant/configs/k8s/cr-minio.yaml
      > /root/{{ percona_k8s_op_name }}/deploy/cr-backup.yaml;
      mv /root/{{ percona_k8s_op_name }}/deploy/cr-backup.yaml /root/{{ percona_k8s_op_name }}/deploy/cr.yaml;
      touch /root/{{ percona_k8s_op_name }}-k8s.backup.applied
    creates: /root/{{ percona_k8s_op_name }}-k8s.backup.applied
- name: Start database cluster in k8s
  when: percona_k8s_op_pxc_version != '' or percona_k8s_op_ps_version != '' or percona_k8s_op_psmdb_version != ''
  shell:
    warn: false
    cmd: >-
      kubectl apply -f /root/{{ percona_k8s_op_name }}/deploy/cr.yaml;
      touch /root/{{ percona_k8s_op_name }}-k8s.cr.applied
    creates: /root/{{ percona_k8s_op_name }}-k8s.cr.applied

- name: install Percona Postgresql Operator
  when: percona_pg_op_version != ''
  shell:
    cmd: >-
      cd /root;
      git clone -b v{{ percona_pg_op_version }} https://github.com/percona/percona-postgresql-operator;
      cd percona-postgresql-operator;
      until kubectl wait --for=condition=ready -n kube-system pod -l k8s-app=kube-dns &>/dev/null;do sleep 2;done;
      kubectl create namespace pgo;
      kubectl apply -n pgo -f ./deploy/operator.yaml;
      until kubectl wait --for=condition=ready pod --namespace pgo -l name=postgres-operator &>/dev/null;do sleep 2;done;
      kubectl apply -n pgo -f ./deploy/cr.yaml;


- name: install Zalando Postgresql Operator
  when: zalando_pg_op_version != ''
  shell:
    cmd: >-
      cd /root;
      git clone -b v{{ zalando_pg_op_version }} https://github.com/zalando/postgres-operator.git;
      cd postgres-operator;
      until kubectl wait --for=condition=ready -n kube-system pod -l k8s-app=kube-dns &>/dev/null;do sleep 2;done;
      kubectl apply -k manifests/;
      until kubectl wait --for=condition=ready pod -l name=postgres-operator &>/dev/null;do sleep 2;done
    creates: /root/postgres-operator/manifests/minimal-postgres-manifest.yaml

- name: Start Postgresql cluster in k8s
  when: zalando_pg_op_version != ''
  shell:
    warn: false
    cmd: >-
      cd /root/postgres-operator;
      kubectl apply -f manifests/minimal-postgres-manifest.yaml;
      touch /root/zalando_pg.applied
    creates: /root/zalando_pg.applied

- name: install Vites.io operator
  when: vites_version != ''
  shell:
    cmd: >-
      cd /root;
      git clone -b v{{ vites_version }} https://github.com/vitessio/vitess.git;
      cd vitess/examples/operator;
      until kubectl wait --for=condition=ready -n kube-system pod -l k8s-app=kube-dns &>/dev/null;do sleep 2;done;
      kubectl apply -f operator.yaml;
      yum install -y https://github.com/vitessio/vitess/releases/download/v10.0.2/vitess-10.0.2-fc78470.x86_64.rpm;
      until kubectl wait --for=condition=ready pod -l app=vitess-operator &>/dev/null;do sleep 2;done
    creates: /root/vites/examples/operator/operator.yaml
